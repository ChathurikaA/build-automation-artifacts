/*
 Staging tested all scenarios
 The initial project filtering logic is based on https://wiki.jenkins-ci.org/display/JENKINS/Display+list+of+projects+that+were+built+more+than+1+day+ago.
 */
package org.wso2.build;
import hudson.plugins.git.UserRemoteConfig;
import hudson.plugins.git.extensions.impl.WipeWorkspace;
import com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper;
import hudson.plugins.git.*
import hudson.maven.*;
import hudson.plugins.git.util.*;
import hudson.model.Item;
import hudson.model.Job;
import hudson.model.Queue;
import hudson.model.TaskListener;
import hudson.model.queue.Tasks;
import hudson.model.AbstractProject;
import hudson.model.Project;
import hudson.maven.RedeployPublisher.DescriptorImpl;
import hudson.plugins.git.util.Build;
import hudson.triggers.SCMTrigger;
import hudson.triggers.Trigger;
import hudson.triggers.TriggerDescriptor;
import hudson.maven.AbstractMavenProject;
import hudson.maven.MavenBuild;
import hudson.maven.MavenModule;
import hudson.maven.MavenModuleSet;
import hudson.maven.MavenModuleSetBuild;
import hudson.Extension;
import hudson.Util;
import hudson.plugins.git.extensions.GitSCMExtension;
import hudson.plugins.git.extensions.GitSCMExtensionDescriptor;
import com.cloudbees.jenkins.*;
import com.google.common.base.Charsets;
import com.google.common.base.Preconditions;
import hudson.console.AnnotatedLargeText;
import hudson.triggers.SCMTrigger;
import hudson.triggers.Trigger;
import hudson.triggers.TriggerDescriptor;
import hudson.util.FormValidation;
import hudson.util.NamingThreadFactory;
import hudson.util.SequentialExecutionQueue;
import hudson.util.StreamTaskListener;
import jenkins.model.ParameterizedJobMixIn;
import jenkins.triggers.SCMTriggerItem.SCMTriggerItems;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import org.kohsuke.stapler.AncestorInPath;
import org.kohsuke.stapler.DataBoundConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.jvnet.hudson.plugins.m2release.M2ReleaseBuildWrapper;
import hudson.Extension;
import hudson.Launcher;
import hudson.Util;
import hudson.maven.AbstractMavenProject;
import hudson.maven.MavenBuild;
import hudson.maven.MavenModule;
import hudson.maven.MavenModuleSet;
import hudson.maven.MavenModuleSetBuild;
import hudson.model.Action;
import hudson.model.BuildListener;
import hudson.model.Result;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.model.Descriptor;
import hudson.model.Hudson;
import hudson.model.Item;
import hudson.model.Run;
import hudson.security.Permission;
import hudson.security.PermissionGroup;
import hudson.tasks.BuildWrapper;
import hudson.tasks.BuildWrapperDescriptor;
import hudson.tasks.Builder;
import hudson.util.FormValidation;
import hudson.util.RunList;
import hudson.plugins.git.util.Build;
import java.io.IOException;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Map;
import static org.apache.commons.lang3.StringUtils.isEmpty;
import static org.jenkinsci.plugins.github.util.JobInfoHelpers.asParameterizedJobMixIn;
import static com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper.VarPasswordPair;

try{
jenkins = Hudson.instance
// Define hour to compare (hour=24 will find builds that were built more than 1 day ago)
hour=24;
minute=60;
second=60;
oneDayInSecond=hour*minute*second;
now=Calendar.instance;
list=[];

println("The build is run at ${now.time}");

for (item in jenkins.items){

    AbstractBuild build=item.getLastBuild()
    BuildListener buildListener;
    AbstractProject project;
    GitSCM gitSCM;
    List <VarPasswordPair> varPasswordPairs;
  
    String projName="carbon-data"
    if(!item.disabled&&item.getLastBuild()!=null&&(item.name ==~/carbon-([a-zA-Z])+/)){
   //if(!item.disabled&&item.getLastBuild()!=null&&(item.name ==projName)){
     println(item.name)

  /*
      This section handles the mask password plugin v2.8  
 
   */   
      varPasswordPairs = new ArrayList();
      MaskPasswordsBuildWrapper mpw =new MaskPasswordsBuildWrapper(varPasswordPairs)
    this.varPasswordPairs=varPasswordPairs
    
    msk = item.getBuildWrappers().get(MaskPasswordsBuildWrapper.class);
   
    if(msk ==null){
      
          msk = item.getBuildWrappers().add(mpw)
    } 
       
      
   
     /*
      This section handles the build triggers
     */

      
      GitHubPushTrigger gitTrigger=new GitHubPushTrigger()
    
    
    
    //SCM Trigger
    TriggerDescriptor SCM_TRIGGER_DESCRIPTOR = Hudson.instance.getDescriptorOrDie(SCMTrigger.class)
    def scmtrigger = item.getTriggers().get(SCM_TRIGGER_DESCRIPTOR) 
    
    
    TriggerDescriptor GIT_TRIGGER_DESCRIPTOR = Hudson.instance.getDescriptor(GitHubPushTrigger.class)
    def gittrigger = item.getTriggers().get(GIT_TRIGGER_DESCRIPTOR)
    
   
    if(scmtrigger != null){
        println("SCM triggers removed")
        item.removeTrigger(SCM_TRIGGER_DESCRIPTOR)
        item.save()
     }
     
     
    if(gittrigger == null){
        println("Build when a change is pushed to GitHub trigger applied")
         item.addTrigger(new GitHubPushTrigger())
          item.save()
     
     }
      
      
      
      
      
     /*
       This section handles the credentials dropdown
      */
      
     //Assign the credentialsID for the required value
     final String credentialsId="4ff4a55b-1313-45da-8cbf-b2e100b1accd"

     gitSCM = (GitSCM) build.getProject().getScm();
     project = build.getProject();
            
     List<UserRemoteConfig> userRemoteConfigs = gitSCM.getUserRemoteConfigs();

          
     if (userRemoteConfigs.isEmpty()) {
        println("[WSO2 Maven Release] " + "Could not find the git remote URL for the project. \n");
     }
     if(userRemoteConfigs.get(0).getCredentialsId() == null){
       println("credentials applied")
       userRemoteConfigs.get(0).credentialsId=credentialsId
       
       item.save()
     }else{
             println("credentials applied")
              userRemoteConfigs.get(0).credentialsId=credentialsId
              item.save()

         }
    /*
     This section handles the post build actions
     */
      
    String id="wso2.snapshots"
    String url="http://maven.wso2.org/nexus/content/repositories/snapshots/";
    boolean uniqueVersion=true;
    boolean evenIfUnstable=false;
    String releaseEnvVar="IS_M2RELEASEBUILD";
    BuildListener listener;  
   
      
   RedeployPublisher  rdp =new   RedeployPublisher(id,url,uniqueVersion,evenIfUnstable,releaseEnvVar) 
        this.id = id;
        this.url = url;
        this.uniqueVersion = uniqueVersion;
        this.evenIfUnstable = evenIfUnstable;
        this.releaseEnvVar = releaseEnvVar;

 
      envVarValue=item.getPublishersList().get(RedeployPublisher.class)
     
       if (envVarValue == null)
          { 
           println("Post build actions >> deploy artifacts to maven repo")

            envVarValue=item.getPublishersList().add(rdp)
            item.save()
            action = "established"
          }              

      /*
       This section handles the maven release build
       */
      
      def   DEFAULT_RELEASE_GOALS = "release:clean release:prepare release:perform -P wso2-release";
      def   DEFAULT_DRYRUN_GOALS = "release:clean release:prepare release:perform -P wso2-release";
                                                                                                   
      
       M2ReleaseBuildWrapper m2obj = new M2ReleaseBuildWrapper(DEFAULT_RELEASE_GOALS,DEFAULT_DRYRUN_GOALS,false,false,false,"IS_M2RELEASEBUILD","","",0)
                          this.releaseGoals=DEFAULT_RELEASE_GOALS
                          this.dryRunGoals=DEFAULT_DRYRUN_GOALS
                          this.selectCustomScmCommentPrefix=true
                          this.selectAppendHudsonUsername=true
                          this.selectScmCredentials=false
                          this.releaseEnvVar=""
                          this.scmUserEnvVar=""
                          this.scmPasswordEnvVar=""
                          this.numberOfReleaseBuildsToKeep=0
              
    build=item.getLastBuild()
   // println("Script applies to project" + "${item.name}"+"\tand build\t"+"${build.toString()}");                                                                                 

       rw = item.getBuildWrappers().get(M2ReleaseBuildWrapper.class);
   
 
  
   
    if (rw == null)
    { 
      rw = item.getBuildWrappers().add(m2obj)
      item.save()
      action = "established"
    }
      
/*
  this section handles the wipeout workspace and force clone
 */

 WipeWorkspace work =new WipeWorkspace(); 
     //GitSCM
     gitSCM = (GitSCM) build.getProject().getScm();
            
     List<GitSCMExtension> gitExtensions = gitSCM.getExtensions();      
          
   
     if(gitExtensions !=null){
       println("wipe out workspace and force clone")
       gitExtensions.add(work)
       item.save()
     }
     if(gitExtensions ==null){
       println("wipe out workspace and force clone")
       gitExtensions.add(work)
       item.save()
     }
      
      
  } 
}
}catch(Exception e){}
